import { useState, useEffect } from 'react';
import { Link, useParams, useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { FaBox, FaShoppingBag, FaTruck, FaCheck, FaSpinner, FaInfoCircle, FaShippingFast, FaBoxOpen } from 'react-icons/fa';
import { useAuth } from '../../context/AuthContext';
import { toast } from 'react-hot-toast';
import '../../styles/OrderHistory.css';

const OrderHistory = () => {
  const { user } = useAuth();
  const { orderId } = useParams();
  const navigate = useNavigate();
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [selectedOrder, setSelectedOrder] = useState(null);
  const [filter, setFilter] = useState('all');

  useEffect(() => {
    const fetchOrders = async () => {
      try {
        setLoading(true);
        setError(null);

        // Check if user is authenticated
        if (!user) {
          throw new Error('User not authenticated');
        }

        const token = await user.getIdToken(/* forceRefresh */ true);
        const response = await fetch('http://localhost:5000/api/orders', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.message || 'Failed to fetch orders');
        }

        const ordersData = await response.json();

        // Filter orders belonging to the authenticated user
        const userOrders = ordersData.filter(order => order.userId === user.uid);
        setOrders(userOrders);

        if (userOrders.length === 0) {
          setSelectedOrder(null);
        } else if (orderId) {
          const matchedOrder = userOrders.find(order => order._id === orderId);
          setSelectedOrder(matchedOrder || userOrders[0]);
        } else {
          setSelectedOrder(userOrders[0]);
        }

      } catch (err) {
        console.error('Order fetch error:', err);
        setError(err.message.includes('auth') 
          ? 'Session expired. Please log in again.'
          : err.message
        );
      } finally {
        setLoading(false);
      }
    };

    fetchOrders();
  }, [user, orderId]);

  const filteredOrders = filter === 'all' 
    ? orders 
    : orders.filter(order => order.status === filter);

  const getStatusIcon = (status) => {
    switch(status) {
      case 'pending':
        return <FaSpinner className="animate-spin text-yellow-500" />;
      case 'processing':
        return <FaTruck className="text-blue-500" />;
      case 'shipped':
        return <FaShippingFast className="text-indigo-500" />;
      case 'delivered':
        return <FaBoxOpen className="text-green-500" />;
      case 'completed':
        return <FaCheck className="text-green-500" />;
      case 'cancelled':
        return <FaInfoCircle className="text-red-500" />;
      default:
        return <FaBox className="text-gray-500" />;
    }
  };

  const formatDate = (dateString) => {
    const options = { year: 'numeric', month: 'long', day: 'numeric' };
    return new Date(dateString).toLocaleDateString(undefined, options);
  };

  if (loading) {
    return (
      <div className="order-history-page">
        <div className="container mx-auto py-8 px-4 max-w-7xl">
          <div className="flex justify-center items-center h-64">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="order-history-page">
        <div className="container mx-auto py-8 px-4 max-w-7xl">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-red-600">Error Loading Orders</h1>
            <p className="mt-2">{error}</p>
            <button 
              onClick={() => navigate('/products')}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
            >
              Continue Shopping
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="order-history-page bg-gray-50">
      <div className="container mx-auto py-8 px-4 max-w-7xl">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Your Orders</h1>
          <Link 
            to="/products" 
            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
          >
            Continue Shopping
          </Link>
        </div>

        {orders.length === 0 ? (
          <div className="text-center py-12 bg-white rounded-lg shadow">
            <FaShoppingBag className="mx-auto text-6xl text-gray-300 mb-4" />
            <h2 className="text-2xl font-semibold text-gray-700 mb-2">No Orders Yet</h2>
            <p className="text-gray-500 mb-6">You haven't placed any orders yet.</p>
            <Link 
              to="/products" 
              className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition"
            >
              Start Shopping
            </Link>
          </div>
        ) : (
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <div className="order-list lg:col-span-1">
              <div className="bg-white rounded-lg shadow overflow-hidden">
                <div className="px-4 py-3 bg-gray-100 border-b">
                  <div className="flex space-x-4">
                    <button 
                      onClick={() => setFilter('all')}
                      className={`px-3 py-1 rounded-full text-sm ${filter === 'all' 
                        ? 'bg-blue-600 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      All
                    </button>
                    <button 
                      onClick={() => setFilter('pending')}
                      className={`px-3 py-1 rounded-full text-sm ${filter === 'pending' 
                        ? 'bg-yellow-500 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Pending
                    </button>
                    <button 
                      onClick={() => setFilter('processing')}
                      className={`px-3 py-1 rounded-full text-sm ${filter === 'processing' 
                        ? 'bg-blue-500 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Processing
                    </button>
                    <button 
                      onClick={() => setFilter('completed')}
                      className={`px-3 py-1 rounded-full text-sm ${filter === 'completed' 
                        ? 'bg-green-500 text-white' 
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}`}
                    >
                      Completed
                    </button>
                  </div>
                </div>
                
                <div className="orders-list max-h-[600px] overflow-y-auto">
                  {filteredOrders.length === 0 ? (
                    <div className="p-6 text-center text-gray-500">
                      No orders matching the selected filter
                    </div>
                  ) : (
                    filteredOrders.map(order => (
                      <motion.div
                        key={order._id}
                        initial={{ opacity: 0, y: 5 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.3 }}
                        className={`border-b last:border-0 cursor-pointer hover:bg-gray-50 transition ${
                          selectedOrder?._id === order._id ? 'bg-blue-50' : ''
                        }`}
                        onClick={() => setSelectedOrder(order)}
                      >
                        <div className="p-4">
                          <div className="flex justify-between items-start">
                            <div>
                              <p className="text-sm text-gray-500">Order #{order._id.substring(0, 8)}</p>
                              <p className="font-semibold">{formatDate(order.createdAt)}</p>
                            </div>
                            <div className="flex items-center">
                              {getStatusIcon(order.status)}
                              <span 
                                className={`ml-2 text-sm px-2 py-1 rounded-full ${
                                  order.status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                  order.status === 'processing' ? 'bg-blue-100 text-blue-800' :
                                  order.status === 'shipped' ? 'bg-indigo-100 text-indigo-800' :
                                  order.status === 'delivered' ? 'bg-green-100 text-green-800' :
                                  order.status === 'completed' ? 'bg-green-100 text-green-800' :
                                  'bg-gray-100 text-gray-800'
                                }`}
                              >
                                {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                              </span>
                            </div>
                          </div>
                          
                          <div className="mt-2">
                            <p className="text-sm font-medium">
                              {order.items.length} {order.items.length === 1 ? 'item' : 'items'}
                            </p>
                            <p className="text-lg font-bold mt-1">
                              â‚±{parseFloat(order.total).toLocaleString('en-PH', {
                                minimumFractionDigits: 2,
                                maximumFractionDigits: 2
                              })}
                            </p>
                          </div>
                        </div>
                      </motion.div>
                    ))
                  )}
                </div>
              </div>
            </div>
            
            <div className="order-details lg:col-span-2">
              {selectedOrder ? (
                <motion.div 
                  className="bg-white rounded-lg shadow"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.4 }}
                >
                  <div className="border-b p-6">
                    <div className="flex justify-between items-start">
                      <div>
                        <h2 className="text-2xl font-bold">Order #{selectedOrder._id.substring(0, 8)}</h2>
                        <p className="text-gray-500">Placed on {formatDate(selectedOrder.createdAt)}</p>
                      </div>
                      <div className="bg-gray-100 p-3 rounded-lg">
                        <div className="text-center">
                          <p className="text-sm text-gray-500">Status</p>
                          <div className="flex items-center justify-center mt-1">
                            {getStatusIcon(selectedOrder.status)}
                            <span className="ml-2 font-semibold">
                              {selectedOrder.status.charAt(0).toUpperCase() + selectedOrder.status.slice(1)}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="order-progress mt-8">
                      <div className="flex justify-between mb-2">
                        <div className="text-center flex-1">
                          <div className={`h-8 w-8 rounded-full mx-auto flex items-center justify-center ${
                            ['pending', 'processing', 'shipped', 'delivered', 'completed'].includes(selectedOrder.status) 
                              ? 'bg-green-500 text-white' 
                              : 'bg-gray-300'
                          }`}>
                            <FaCheck />
                          </div>
                          <p className="text-xs mt-1">Order Placed</p>
                        </div>
                        <div className="text-center flex-1">
                          <div className={`h-8 w-8 rounded-full mx-auto flex items-center justify-center ${
                            ['processing', 'shipped', 'delivered', 'completed'].includes(selectedOrder.status) 
                              ? 'bg-green-500 text-white' 
                              : 'bg-gray-300'
                          }`}>
                            <FaSpinner />
                          </div>
                          <p className="text-xs mt-1">Processing</p>
                        </div>
                        <div className="text-center flex-1">
                          <div className={`h-8 w-8 rounded-full mx-auto flex items-center justify-center ${
                            ['shipped', 'delivered', 'completed'].includes(selectedOrder.status) 
                              ? 'bg-green-500 text-white' 
                              : 'bg-gray-300'
                          }`}>
                            <FaTruck />
                          </div>
                          <p className="text-xs mt-1">Shipped</p>
                        </div>
                        <div className="text-center flex-1">
                          <div className={`h-8 w-8 rounded-full mx-auto flex items-center justify-center ${
                            ['delivered', 'completed'].includes(selectedOrder.status) 
                              ? 'bg-green-500 text-white' 
                              : 'bg-gray-300'
                          }`}>
                            <FaBoxOpen />
                          </div>
                          <p className="text-xs mt-1">Delivered</p>
                        </div>
                      </div>
                      
                      <div className="relative h-2 bg-gray-200 rounded-full mt-2 mb-4">
                        <div className={`absolute h-2 bg-green-500 rounded-full ${
                          selectedOrder.status === 'pending' ? 'w-1/4' :
                          selectedOrder.status === 'processing' ? 'w-2/4' :
                          selectedOrder.status === 'shipped' ? 'w-3/4' :
                          selectedOrder.status === 'delivered' ? 'w-full' : 'w-0'
                        }`}></div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-6 border-b">
                    <h3 className="text-xl font-semibold mb-4">Order Items</h3>
                    <div className="space-y-4">
                      {selectedOrder.items.map((item, index) => (
                        <div key={index} className="flex border-b pb-4 last:border-0 last:pb-0">
                          <div className="flex-shrink-0 w-20 h-20 bg-gray-100 rounded overflow-hidden">
                            <img 
                              src={item.image || 'https://via.placeholder.com/80'} 
                              alt={item.name}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="ml-4 flex-1">
                            <h4 className="font-medium">{item.name}</h4>
                            <div className="flex justify-between items-end mt-2">
                              <div>
                                <p className="text-sm text-gray-500">Qty: {item.quantity}</p>
                                <p className="text-sm text-gray-500">Price: â‚±{parseFloat(item.price).toLocaleString('en-PH', {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                })}</p>
                              </div>
                              <p className="font-bold">
                                â‚±{parseFloat(item.price * item.quantity).toLocaleString('en-PH', {
                                  minimumFractionDigits: 2,
                                  maximumFractionDigits: 2
                                })}
                              </p>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                  
                  <div className="p-6 border-b">
                    <h3 className="text-xl font-semibold mb-4">Order Summary</h3>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span>Subtotal</span>
                        <span>â‚±{parseFloat(selectedOrder.summary?.subtotal || 0).toLocaleString('en-PH', {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2
                        })}</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Tax</span>
                        <span>â‚±{parseFloat(selectedOrder.summary?.tax || 0).toLocaleString('en-PH', {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2
                        })}</span>
                      </div>
                      <div className="border-t pt-2 mt-2">
                        <div className="flex justify-between font-bold">
                          <span>Total</span>
                          <span>â‚±{parseFloat(selectedOrder.total).toLocaleString('en-PH', {
                            minimumFractionDigits: 2,
                            maximumFractionDigits: 2
                          })}</span>
                        </div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="p-6">
                    <h3 className="text-xl font-semibold mb-4">Shipping Information</h3>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h4 className="font-medium text-gray-500 mb-2">Contact Information</h4>
                        <p>{selectedOrder.shipping?.firstName} {selectedOrder.shipping?.lastName}</p>
                        <p className="text-gray-700">{selectedOrder.shipping?.email}</p>
                        <p className="text-gray-700">{selectedOrder.shipping?.phone}</p>
                      </div>
                      <div>
                        <h4 className="font-medium text-gray-500 mb-2">Shipping Address</h4>
                        <p>{selectedOrder.shipping?.address}</p>
                        <p>{selectedOrder.shipping?.city}, {selectedOrder.shipping?.province} {selectedOrder.shipping?.postalCode}</p>
                      </div>
                    </div>
                  </div>
                </motion.div>
              ) : (
                <div className="bg-white rounded-lg shadow p-8 text-center">
                  <FaInfoCircle className="text-5xl text-gray-300 mx-auto mb-4" />
                  <h3 className="text-xl font-semibold mb-2">No Order Selected</h3>
                  <p className="text-gray-500">Select an order from the list to view its details</p>
                </div>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default OrderHistory; 